--[[
    SimpluxUI Library v1.2
    A lightweight UI library for Roblox with modern features
    * Rounded elements
    * Custom typography
    * Draggable windows
    * Shadows and glow effects
    * Padding and proper spacing
    * Smooth animations
    * Scrolling support
    * Minimize functionality
    * Tabs support
]]

-- Create the main library object
local SimpluxUI = {}
SimpluxUI.__index = SimpluxUI

-- Configuration
local Config = {
    Font = Enum.Font.GothamMedium,
    TextSize = 14,
    Padding = UDim.new(0, 10),
    CornerRadius = UDim.new(0, 8),
    PrimaryColor = Color3.fromRGB(41, 47, 54),
    SecondaryColor = Color3.fromRGB(61, 67, 74),
    AccentColor = Color3.fromRGB(86, 180, 255),
    TextColor = Color3.fromRGB(240, 240, 240),
    ShadowColor = Color3.fromRGB(0, 0, 0),
    AnimationDuration = 0.2,
    AnimationEasingStyle = Enum.EasingStyle.Quart,
    AnimationEasingDirection = Enum.EasingDirection.Out,
    ButtonWidth = UDim.new(0.9, 0), -- Increased button width
    TabHeight = 36 -- Added tab height
}

-- Utility Functions
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for prop, value in pairs(properties or {}) do
        instance[prop] = value
    end
    return instance
end

local function Tween(instance, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(
        duration or Config.AnimationDuration,
        easingStyle or Config.AnimationEasingStyle,
        easingDirection or Config.AnimationEasingDirection
    )
    local tween = game:GetService("TweenService"):Create(instance, tweenInfo, properties)
    tween:Play()
    return tween
end

local function ApplyRoundedCorners(frame)
    local corner = CreateInstance("UICorner", {
        CornerRadius = Config.CornerRadius,
        Parent = frame
    })
    return corner
end

local function ApplyShadow(frame, transparency)
    local shadow = CreateInstance("ImageLabel", {
        Name = "Shadow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 4),
        Size = UDim2.new(1, 8, 1, 8),
        ZIndex = frame.ZIndex - 1,
        Image = "rbxassetid://6014261993",
        ImageColor3 = Config.ShadowColor,
        ImageTransparency = transparency or 0.5,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450),
        Parent = frame
    })
    return shadow
end

local function SetDraggable(frame, handle)
    local UserInputService = game:GetService("UserInputService")
    local dragging, dragInput, dragStart, startPos
    
    local function UpdateDrag()
        if dragging then
            local delta = dragInput.Position - dragStart
            Tween(frame, {
                Position = UDim2.new(
                    startPos.X.Scale, 
                    startPos.X.Offset + delta.X, 
                    startPos.Y.Scale, 
                    startPos.Y.Offset + delta.Y
                )
            }, 0.05)
        end
    end
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    
    handle.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            UpdateDrag()
        end
    end)
end

-- Initialize the library
function SimpluxUI.new(title, parent)
    local screenGui = CreateInstance("ScreenGui", {
        Name = "SimpluxUI",
        ResetOnSpawn = false,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        Parent = parent or game.Players.LocalPlayer:WaitForChild("PlayerGui")
    })
    
    local self = setmetatable({
        GUI = screenGui,
        Windows = {},
        Elements = {}
    }, SimpluxUI)
    
    if title then
        self:CreateWindow(title)
    end
    
    return self
end

-- Create a new window
function SimpluxUI:CreateWindow(title, size)
    local windowSize = size or UDim2.new(0, 350, 0, 250)
    
    local window = CreateInstance("Frame", {
        Name = "Window",
        BackgroundColor3 = Config.PrimaryColor,
        Position = UDim2.new(0.5, -windowSize.X.Offset/2, 0.5, -windowSize.Y.Offset/2),
        Size = windowSize,
        ZIndex = 10,
        Parent = self.GUI
    })
    
    ApplyRoundedCorners(window)
    ApplyShadow(window)
    
    -- Title bar
    local titleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        BackgroundColor3 = Config.SecondaryColor,
        Size = UDim2.new(1, 0, 0, 36),
        ZIndex = 11,
        Parent = window
    })
    
    local titleCorner = ApplyRoundedCorners(titleBar)
    titleCorner.CornerRadius = UDim.new(0, 8)
    
    local titleLabel = CreateInstance("TextLabel", {
        Name = "Title",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 12, 0, 0),
        Size = UDim2.new(1, -80, 1, 0), -- Adjusted for both buttons
        ZIndex = 12,
        Font = Config.Font,
        Text = title or "SimpluxUI Window",
        TextColor3 = Config.TextColor,
        TextSize = Config.TextSize + 2,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = titleBar
    })
    
    -- Add minimize button
    local minimizeButton = CreateInstance("TextButton", {
        Name = "MinimizeButton",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 200, 0),
        Position = UDim2.new(1, -38, 0.5, 0),
        Size = UDim2.new(0, 22, 0, 22),
        ZIndex = 12,
        Font = Config.Font,
        Text = "-",
        TextColor3 = Color3.fromRGB(40, 40, 40),
        TextSize = Config.TextSize + 2,
        Parent = titleBar
    })
    
    ApplyRoundedCorners(minimizeButton)
    
    minimizeButton.MouseEnter:Connect(function()
        Tween(minimizeButton, {BackgroundColor3 = Color3.fromRGB(255, 220, 0)})
    end)
    
    minimizeButton.MouseLeave:Connect(function()
        Tween(minimizeButton, {BackgroundColor3 = Color3.fromRGB(255, 200, 0)})
    end)
    
    -- Close button
    local closeButton = CreateInstance("TextButton", {
        Name = "CloseButton",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 75, 75),
        Position = UDim2.new(1, -8, 0.5, 0),
        Size = UDim2.new(0, 22, 0, 22),
        ZIndex = 12,
        Font = Config.Font,
        Text = "",
        TextColor3 = Config.TextColor,
        TextSize = Config.TextSize,
        Parent = titleBar
    })
    
    ApplyRoundedCorners(closeButton)
    
    closeButton.MouseEnter:Connect(function()
        Tween(closeButton, {BackgroundColor3 = Color3.fromRGB(255, 95, 95)})
    end)
    
    closeButton.MouseLeave:Connect(function()
        Tween(closeButton, {BackgroundColor3 = Color3.fromRGB(255, 75, 75)})
    end)
    
    closeButton.MouseButton1Click:Connect(function()
        Tween(window, {Size = UDim2.new(0, windowSize.X.Offset, 0, 0), Position = UDim2.new(window.Position.X.Scale, window.Position.X.Offset, window.Position.Y.Scale, window.Position.Y.Offset + windowSize.Y.Offset/2)}, 0.3)
        wait(0.3)
        window:Destroy()
    end)
    
    -- Tab container
    local tabContainer = CreateInstance("Frame", {
        Name = "TabContainer",
        BackgroundColor3 = Config.SecondaryColor,
        Position = UDim2.new(0, 0, 0, 36),
        Size = UDim2.new(1, 0, 0, Config.TabHeight),
        ZIndex = 11,
        Parent = window
    })
    
    local tabContainerCorner = ApplyRoundedCorners(tabContainer)
    tabContainerCorner.CornerRadius = UDim.new(0, 6)
    
    local tabScrollFrame = CreateInstance("ScrollingFrame", {
        Name = "TabScrollFrame",
        BackgroundTransparency = 1,
        BorderSizePixel = 0,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, 0, 1, 0),
        ZIndex = 11,
        ScrollBarThickness = 2,
        ScrollingDirection = Enum.ScrollingDirection.X,
        ScrollBarImageColor3 = Config.AccentColor,
        CanvasSize = UDim2.new(0, 0, 0, 0),
        Parent = tabContainer
    })
    
    local tabLayout = CreateInstance("UIListLayout", {
        FillDirection = Enum.FillDirection.Horizontal,
        HorizontalAlignment = Enum.HorizontalAlignment.Left,
        SortOrder = Enum.SortOrder.LayoutOrder,
        Padding = UDim.new(0, 2),
        Parent = tabScrollFrame
    })
    
    local tabPadding = CreateInstance("UIPadding", {
        PaddingLeft = UDim.new(0, 6),
        PaddingRight = UDim.new(0, 6),
        PaddingTop = UDim.new(0, 4),
        PaddingBottom = UDim.new(0, 4),
        Parent = tabScrollFrame
    })
    
    -- Content container to hold tab pages
    local contentContainer = CreateInstance("Frame", {
        Name = "ContentContainer",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 36 + Config.TabHeight), -- Below tabs
        Size = UDim2.new(1, 0, 1, -(36 + Config.TabHeight)),
        ZIndex = 11,
        ClipsDescendants = true,
        Parent = window
    })
    
    -- Make window draggable
    SetDraggable(window, titleBar)
    
    -- Initial animation
    window.Size = UDim2.new(0, windowSize.X.Offset, 0, 0)
    window.Position = UDim2.new(window.Position.X.Scale, window.Position.X.Offset, window.Position.Y.Scale, window.Position.Y.Offset + windowSize.Y.Offset/2)
    
    Tween(window, {
        Size = windowSize,
        Position = UDim2.new(window.Position.X.Scale, window.Position.X.Offset, window.Position.Y.Scale, window.Position.Y.Offset - windowSize.Y.Offset/2)
    })
    
    -- Minimize functionality - improved to maintain UI state
    local minimized = false
    local originalSize = windowSize
    
    minimizeButton.MouseButton1Click:Connect(function()
        minimized = not minimized
        
        if minimized then
            -- Store original size
            originalSize = window.Size
            
            -- Minimize animation
            Tween(window, {
                Size = UDim2.new(0, windowSize.X.Offset, 0, 36)
            }, 0.3)
            
            -- Hide content
            contentContainer.Visible = false
            tabContainer.Visible = false
            minimizeButton.Text = "+"
        else
            -- Restore animation
            Tween(window, {
                Size = originalSize
            }, 0.3)
            
            -- Show content with slight delay to let animation start
            wait(0.05)
            contentContainer.Visible = true
            tabContainer.Visible = true
            minimizeButton.Text = "-"
        end
    end)
    
    -- Update tab layout size
    tabLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        tabScrollFrame.CanvasSize = UDim2.new(0, tabLayout.AbsoluteContentSize.X + 12, 0, 0)
    end)
    
    local tabs = {}
    local currentTab = nil
    
    local windowObj = {
        Frame = window,
        ContentContainer = contentContainer,
        TabContainer = tabContainer,
        TabScrollFrame = tabScrollFrame,
        Title = titleLabel,
        Tabs = tabs,
        Elements = {},
        Minimized = function() return minimized end,
        SetMinimized = function(value)
            if value ~= minimized then
                minimizeButton.MouseButton1Click:Fire()
            end
        end
    }
    
    -- Create tab function
    windowObj.CreateTab = function(tabName)
        local tabButton = CreateInstance("TextButton", {
            Name = "Tab_" .. tabName,
            BackgroundColor3 = #tabs == 0 and Config.AccentColor or Config.SecondaryColor,
            Size = UDim2.new(0, 0, 1, -8), -- Auto width
            AutomaticSize = Enum.AutomaticSize.X,
            ZIndex = 12,
            Font = Config.Font,
            Text = tabName,
            TextColor3 = Config.TextColor,
            TextSize = Config.TextSize,
            Parent = tabScrollFrame
        })
        
        ApplyRoundedCorners(tabButton)
        
        local tabPadding = CreateInstance("UIPadding", {
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            Parent = tabButton
        })
        
        -- Content frame for this tab
        local scrollFrame = CreateInstance("ScrollingFrame", {
            Name = "ScrollFrame_" .. tabName,
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 11,
            ScrollBarThickness = 4,
            ScrollBarImageColor3 = Config.AccentColor,
            BorderSizePixel = 0,
            Visible = #tabs == 0, -- First tab is visible by default
            Parent = contentContainer
        })
        
        local contentFrame = CreateInstance("Frame", {
            Name = "Content",
            BackgroundTransparency = 1,
            Size = UDim2.new(1, 0, 1, 0),
            ZIndex = 11,
            AutomaticSize = Enum.AutomaticSize.Y,
            Parent = scrollFrame
        })
        
        local contentPadding = CreateInstance("UIPadding", {
            PaddingBottom = Config.Padding,
            PaddingLeft = Config.Padding,
            PaddingRight = Config.Padding,
            PaddingTop = Config.Padding,
            Parent = contentFrame
        })
        
        local contentLayout = CreateInstance("UIListLayout", {
            Padding = UDim.new(0, 8),
            SortOrder = Enum.SortOrder.LayoutOrder,
            Parent = contentFrame,
            HorizontalAlignment = Enum.HorizontalAlignment.Center -- Center all elements
        })
        
        -- Auto-size the content frame
        contentLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            contentFrame.Size = UDim2.new(1, 0, 0, contentLayout.AbsoluteContentSize.Y + Config.Padding.Offset * 2)
            scrollFrame.CanvasSize = UDim2.new(0, 0, 0, contentLayout.AbsoluteContentSize.Y + Config.Padding.Offset * 2)
        end)
        
        local tabObj = {
            Button = tabButton,
            ScrollFrame = scrollFrame,
            ContentFrame = contentFrame,
            Elements = {}
        }
        
        -- Tab click event
        tabButton.MouseButton1Click:Connect(function()
            if currentTab ~= tabObj then
                -- Update tab appearance
                for _, tab in pairs(tabs) do
                    Tween(tab.Button, {BackgroundColor3 = Config.SecondaryColor})
                    tab.ScrollFrame.Visible = false
                end
                
                Tween(tabButton, {BackgroundColor3 = Config.AccentColor})
                scrollFrame.Visible = true
                currentTab = tabObj
            end
        end)
        
        table.insert(tabs, tabObj)
        
        -- Set first tab as current
        if #tabs == 1 then
            currentTab = tabObj
        end
        
        return tabObj
    end
    
    -- Create a default tab if none exists
    local defaultTab = windowObj.CreateTab("Default")
    
    table.insert(self.Windows, windowObj)
    return windowObj
end

-- Create a button
function SimpluxUI:CreateButton(window, text, callback)
    local tab = window.Tabs[1] -- Default to first tab if no tab specified
    if window.CreateTab then -- if window has tabs
        tab = currentTab or window.Tabs[1]
    end
    
    local contentFrame = tab and tab.ContentFrame or window.ContentFrame
    
    local button = CreateInstance("TextButton", {
        Name = "Button",
        BackgroundColor3 = Config.SecondaryColor,
        Size = UDim2.new(Config.ButtonWidth.Scale, Config.ButtonWidth.Offset, 0, 36),
        ZIndex = 12,
        Font = Config.Font,
        Text = text or "Button",
        TextColor3 = Config.TextColor,
        TextSize = Config.TextSize,
        Parent = contentFrame
    })
    
    ApplyRoundedCorners(button)
    
    -- Glow effect
    local buttonGlow = CreateInstance("ImageLabel", {
        Name = "Glow",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 1,
        Position = UDim2.new(0.5, 0, 0.5, 0),
        Size = UDim2.new(1, 24, 1, 24),
        ZIndex = 11,
        Image = "rbxassetid://6014261993",
        ImageColor3 = Config.AccentColor,
        ImageTransparency = 0.9,
        ScaleType = Enum.ScaleType.Slice,
        SliceCenter = Rect.new(49, 49, 450, 450),
        Parent = button
    })
    
    -- Button effects
    button.MouseEnter:Connect(function()
        Tween(button, {BackgroundColor3 = Color3.fromRGB(71, 77, 84)})
        Tween(buttonGlow, {ImageTransparency = 0.7})
    end)
    
    button.MouseLeave:Connect(function()
        Tween(button, {BackgroundColor3 = Config.SecondaryColor})
        Tween(buttonGlow, {ImageTransparency = 0.9})
    end)
    
    button.MouseButton1Down:Connect(function()
        Tween(button, {BackgroundColor3 = Color3.fromRGB(51, 57, 64)}, 0.1)
    end)
    
    button.MouseButton1Up:Connect(function()
        Tween(button, {BackgroundColor3 = Config.SecondaryColor}, 0.1)
        if callback then callback() end
    end)
    
    table.insert(tab and tab.Elements or window.Elements, button)
    return button
end

-- Create a label
function SimpluxUI:CreateLabel(window, text)
    local tab = window.Tabs[1] -- Default to first tab if no tab specified
    if window.CreateTab then -- if window has tabs
        tab = currentTab or window.Tabs[1]
    end
    
    local contentFrame = tab and tab.ContentFrame or window.ContentFrame
    
    local label = CreateInstance("TextLabel", {
        Name = "Label",
        BackgroundTransparency = 1,
        Size = UDim2.new(1, 0, 0, 24),
        ZIndex = 12,
        Font = Config.Font,
        Text = text or "Label",
        TextColor3 = Config.TextColor,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = contentFrame
    })
    
    table.insert(tab and tab.Elements or window.Elements, label)
    return label
end

-- Create a toggle
function SimpluxUI:CreateToggle(window, text, default, callback)
    local tab = window.Tabs[1] -- Default to first tab if no tab specified
    if window.CreateTab then -- if window has tabs
        tab = currentTab or window.Tabs[1]
    end
    
    local contentFrame = tab and tab.ContentFrame or window.ContentFrame
    
    local toggleContainer = CreateInstance("Frame", {
        Name = "ToggleContainer",
        BackgroundTransparency = 1,
        Size = UDim2.new(Config.ButtonWidth.Scale, Config.ButtonWidth.Offset, 0, 36),
        ZIndex = 12,
        Parent = contentFrame
    })
    
    local toggleLabel = CreateInstance("TextLabel", {
        Name = "ToggleLabel",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, -50, 1, 0),
        ZIndex = 12,
        Font = Config.Font,
        Text = text or "Toggle",
        TextColor3 = Config.TextColor,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = toggleContainer
    })
    
    local toggleButton = CreateInstance("Frame", {
        Name = "ToggleButton",
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = default and Config.AccentColor or Config.SecondaryColor,
        Position = UDim2.new(1, 0, 0.5, 0),
        Size = UDim2.new(0, 44, 0, 24),
        ZIndex = 12,
        Parent = toggleContainer
    })
    
    ApplyRoundedCorners(toggleButton)
    
    local toggleCircle = CreateInstance("Frame", {
        Name = "ToggleCircle",
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Position = default and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 4, 0.5, 0),
        Size = UDim2.new(0, 16, 0, 16),
        ZIndex = 13,
        Parent = toggleButton
    })
    
    ApplyRoundedCorners(toggleCircle)
    
    local toggled = default or false
    
    local function UpdateToggle(value)
        local position = value and UDim2.new(1, -20, 0.5, 0) or UDim2.new(0, 4, 0.5, 0)
        local color = value and Config.AccentColor or Config.SecondaryColor
        
        Tween(toggleCircle, {Position = position})
        Tween(toggleButton, {BackgroundColor3 = color})
        
        if callback then callback(value) end
    end
    
    toggleButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            toggled = not toggled
            UpdateToggle(toggled)
        end
    end)
    
    table.insert(tab and tab.Elements or window.Elements, toggleContainer)
    return {
        Container = toggleContainer,
        SetValue = function(value)
            toggled = value
            UpdateToggle(toggled)
        end,
        GetValue = function()
            return toggled
        end
    }
end

-- Create a slider with improved smoothness
function SimpluxUI:CreateSlider(window, text, min, max, default, callback)
    local tab = window.Tabs[1] -- Default to first tab if no tab specified
    if window.CreateTab then -- if window has tabs
        tab = currentTab or window.Tabs[1]
    end
    
    local contentFrame = tab and tab.ContentFrame or window.ContentFrame
    
    min = min or 0
    max = max or 100
    default = default or min
    
    local sliderContainer = CreateInstance("Frame", {
        Name = "SliderContainer",
        BackgroundTransparency = 1,
        Size = UDim2.new(Config.ButtonWidth.Scale, Config.ButtonWidth.Offset, 0, 50),
        ZIndex = 12,
        Parent = contentFrame
    })
    
    local sliderLabel = CreateInstance("TextLabel", {
        Name = "SliderLabel",
        BackgroundTransparency = 1,
        Position = UDim2.new(0, 0, 0, 0),
        Size = UDim2.new(1, -45, 0, 20), -- Make room for value label
        ZIndex = 12,
        Font = Config.Font,
        Text = text or "Slider",
        TextColor3 = Config.TextColor,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = sliderContainer
    })
    
    local valueLabel = CreateInstance("TextLabel", {
        Name = "ValueLabel",
        BackgroundTransparency = 1,
        Position = UDim2.new(1, -45, 0, 0),
        Size = UDim2.new(0, 45, 0, 20),
        ZIndex = 12,
        Font = Config.Font,
        Text = tostring(math.floor(default)),
        TextColor3 = Config.TextColor,
        TextSize = Config.TextSize,
        TextXAlignment = Enum.TextXAlignment.Right,
        Parent = sliderContainer
    })
    
    local sliderTrack = CreateInstance("Frame", {
        Name = "SliderTrack",
        BackgroundColor3 = Config.SecondaryColor,
        Position = UDim2.new(0, 0, 0, 26),
        Size = UDim2.new(1, 0, 0, 8),
        ZIndex = 12,
        Parent = sliderContainer
    })
    
    ApplyRoundedCorners(sliderTrack)
    
    local sliderFill = CreateInstance("Frame", {
        Name = "SliderFill",
        BackgroundColor3 = Config.AccentColor,
        Size = UDim2.new((default - min) / (max - min), 0, 1, 0),
        ZIndex = 13,
        Parent = sliderTrack
    })
    
    local leftRounded = ApplyRoundedCorners(sliderFill)
    leftRounded.CornerRadius = UDim.new(1, 0)
    
    local sliderKnob = CreateInstance("Frame", {
        Name = "SliderKnob",
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundColor3 = Color3.fromRGB(255, 255, 255),
        Position = UDim2.new((default - min) / (max - min), 0, 0.5, 0),
        Size = UDim2.new(0, 16, 0, 16),
        ZIndex = 14,
        Parent = sliderTrack
    })
    
    ApplyRoundedCorners(sliderKnob)
    ApplyShadow(sliderKnob, 0.7) -- Add shadow to knob for better visibility
    
    local currentValue = default
    local userInputService = game:GetService("UserInputService")
    local runService = game:GetService("RunService")
    local dragging = false
    local lastDragTime = 0
    
    local function UpdateSlider(value, skipTween)
        value = math.clamp(value, min, max)
        currentValue = value
        
        local position = (value - min) / (max - min)
        
        if skipTween then
            sliderFill.Size = UDim2.new(position, 0, 1, 0)
            sliderKnob.Position = UDim2.new(position, 0, 0.5, 0)
        else
            Tween(sliderFill, {Size = UDim2.new(position, 0, 1, 0)}, 0.1)
            Tween(sliderKnob, {Position = UDim2.new(position, 0, 0.5, 0)}, 0.1)
        end
        
        valueLabel.Text = tostring(math.floor(value))
        
        if callback then callback(value) end
    end
    
    local function HandleSliderInput(input)
        local relativePos = math.clamp((input.Position.X - sliderTrack.AbsolutePosition.X) / sliderTrack.AbsoluteSize.X, 0, 1)
        local value = min + (max - min) * relativePos
        UpdateSlider(value, true) -- Use true for instant update
    end
    
    local connection
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            HandleSliderInput(input)
            
            -- Connect to RenderStepped for smoother tracking
            if connection then connection:Disconnect() end
            connection = runService.RenderStepped:Connect(function()
                if dragging then
                    local mousePos = userInputService:GetMouseLocation()
                    local inputObj = {
                        Position = Vector2.new(mousePos.X, mousePos.Y)
                    }
                    HandleSliderInput(inputObj)
                end
            end)
        end
    end)
    
    sliderTrack.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end)
    
    -- Handle if mouse leaves the game window while dragging
    userInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            if connection then
                connection:Disconnect()
                connection = nil
            end
        end
    end)
    
    UpdateSlider(default, true)
    
    table.insert(tab and tab.Elements or window.Elements, sliderContainer)
    return {
        Container = sliderContainer,
        SetValue = function(value)
            UpdateSlider(value)
        end,
        GetValue = function()
            return currentValue
        end
    }
end

-- Add tab creation function directly to the library
function SimpluxUI:AddTab(window, tabName)
    if window.CreateTab then
        return window.CreateTab(tabName)
    else
        warn("This window does not support tabs")
        return nil
    end
end

-- Helper function to easily add elements to specific tabs
function SimpluxUI:AddToTab(window, tabName, elementType, ...)
    -- Find the tab by name
    local targetTab = nil
    for _, tab in pairs(window.Tabs or {}) do
        if tab.Button.Text == tabName then
            targetTab = tab
            break
        end
    end
    
    if not targetTab then
        targetTab = self:AddTab(window, tabName)
        if not targetTab then return nil end
    end
    
    -- Save current tab reference
    local previousTab = currentTab
    currentTab = targetTab
    
    -- Create the element
    local element = nil
    if elementType == "Button" then
        element = self:CreateButton(window, ...)
    elseif elementType == "Label" then
        element = self:CreateLabel(window, ...)
    elseif elementType == "Toggle" then
        element = self:CreateToggle(window, ...)
    elseif elementType == "Slider" then
        element = self:CreateSlider(window, ...)
    end
    
    -- Restore previous tab reference
    currentTab = previousTab
    
    return element
end

-- Add to global environment if available (for backwards compatibility)
if getgenv then
    getgenv().SimpluxUI = SimpluxUI
end

-- Return the library object for direct assignment
return SimpluxUI
