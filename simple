--[[
    Minimal Button UI Library for Roblox
    Modern, clean, and lightweight button system
    Designed for 2025 aesthetics
]]

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local ButtonLib = {}
ButtonLib.__index = ButtonLib

-- Modern color palette
local COLORS = {
    PRIMARY = Color3.fromRGB(18, 18, 20),      -- Deep charcoal
    SECONDARY = Color3.fromRGB(28, 28, 32),    -- Lighter charcoal
    ACCENT = Color3.fromRGB(99, 102, 241),     -- Modern indigo
    SUCCESS = Color3.fromRGB(16, 185, 129),    -- Emerald
    WARNING = Color3.fromRGB(245, 158, 11),    -- Amber
    DANGER = Color3.fromRGB(239, 68, 68),      -- Red
    TEXT_PRIMARY = Color3.fromRGB(255, 255, 255),
    TEXT_SECONDARY = Color3.fromRGB(156, 163, 175),
    SURFACE = Color3.fromRGB(24, 24, 27),
    BORDER = Color3.fromRGB(39, 39, 42)
}

-- Animation presets
local ANIMATIONS = {
    QUICK = TweenInfo.new(0.15, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
    SMOOTH = TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out),
    BOUNCE = TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
}

-- Button variants
local VARIANTS = {
    primary = {bg = COLORS.ACCENT, text = COLORS.TEXT_PRIMARY, hover = Color3.fromRGB(79, 70, 229)},
    secondary = {bg = COLORS.SECONDARY, text = COLORS.TEXT_PRIMARY, hover = COLORS.BORDER},
    ghost = {bg = Color3.fromRGB(0, 0, 0, 0), text = COLORS.TEXT_SECONDARY, hover = COLORS.SURFACE},
    success = {bg = COLORS.SUCCESS, text = COLORS.TEXT_PRIMARY, hover = Color3.fromRGB(5, 150, 105)},
    warning = {bg = COLORS.WARNING, text = COLORS.PRIMARY, hover = Color3.fromRGB(217, 119, 6)},
    danger = {bg = COLORS.DANGER, text = COLORS.TEXT_PRIMARY, hover = Color3.fromRGB(220, 38, 38)}
}

-- Create a new button
function ButtonLib.new(config)
    local self = setmetatable({}, ButtonLib)
    
    config = config or {}
    
    -- Button properties
    self.text = config.text or "Button"
    self.variant = config.variant or "primary"
    self.size = config.size or "md"
    self.disabled = config.disabled or false
    self.parent = config.parent
    self.onClick = config.onClick or function() end
    
    -- Size presets
    local sizes = {
        sm = {height = 32, padding = 12, textSize = 14},
        md = {height = 40, padding = 16, textSize = 16},
        lg = {height = 48, padding = 20, textSize = 18},
        xl = {height = 56, padding = 24, textSize = 20}
    }
    
    local sizeConfig = sizes[self.size] or sizes.md
    local variantConfig = VARIANTS[self.variant] or VARIANTS.primary
    
    -- Create button frame
    self.frame = Instance.new("TextButton")
    self.frame.Name = "MinimalButton"
    self.frame.Size = UDim2.new(0, 120, 0, sizeConfig.height)
    self.frame.Position = config.position or UDim2.new(0, 10, 0, 10)
    self.frame.BackgroundColor3 = variantConfig.bg
    self.frame.BorderSizePixel = 0
    self.frame.Text = ""
    self.frame.AutoButtonColor = false
    self.frame.ClipsDescendants = true
    
    -- Modern rounded corners
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 8)
    corner.Parent = self.frame
    
    -- Subtle border for depth
    local stroke = Instance.new("UIStroke")
    stroke.Color = COLORS.BORDER
    stroke.Thickness = 1
    stroke.Transparency = 0.8
    stroke.Parent = self.frame
    
    -- Button text
    self.label = Instance.new("TextLabel")
    self.label.Name = "Label"
    self.label.Size = UDim2.new(1, -sizeConfig.padding * 2, 1, 0)
    self.label.Position = UDim2.new(0, sizeConfig.padding, 0, 0)
    self.label.BackgroundTransparency = 1
    self.label.Text = self.text
    self.label.TextColor3 = variantConfig.text
    self.label.TextSize = sizeConfig.textSize
    self.label.TextScaled = false
    self.label.Font = Enum.Font.GothamBold
    self.label.Parent = self.frame
    
    -- Hover effect overlay
    self.hoverOverlay = Instance.new("Frame")
    self.hoverOverlay.Name = "HoverOverlay"
    self.hoverOverlay.Size = UDim2.new(1, 0, 1, 0)
    self.hoverOverlay.BackgroundColor3 = Color3.new(1, 1, 1)
    self.hoverOverlay.BackgroundTransparency = 1
    self.hoverOverlay.BorderSizePixel = 0
    self.hoverOverlay.Parent = self.frame
    
    local hoverCorner = Instance.new("UICorner")
    hoverCorner.CornerRadius = UDim.new(0, 8)
    hoverCorner.Parent = self.hoverOverlay
    
    -- Ripple effect frame
    self.rippleFrame = Instance.new("Frame")
    self.rippleFrame.Name = "RippleFrame"
    self.rippleFrame.Size = UDim2.new(1, 0, 1, 0)
    self.rippleFrame.BackgroundTransparency = 1
    self.rippleFrame.BorderSizePixel = 0
    self.rippleFrame.Parent = self.frame
    
    local rippleCorner = Instance.new("UICorner")
    rippleCorner.CornerRadius = UDim.new(0, 8)
    rippleCorner.Parent = self.rippleFrame
    
    -- Connect events
    self:_connectEvents()
    
    -- Set parent
    if self.parent then
        self.frame.Parent = self.parent
    end
    
    return self
end

-- Connect button events
function ButtonLib:_connectEvents()
    local variantConfig = VARIANTS[self.variant] or VARIANTS.primary
    
    -- Hover effects
    self.frame.MouseEnter:Connect(function()
        if self.disabled then return end
        
        TweenService:Create(self.hoverOverlay, ANIMATIONS.QUICK, {
            BackgroundTransparency = 0.92
        }):Play()
        
        TweenService:Create(self.frame, ANIMATIONS.QUICK, {
            Size = self.frame.Size + UDim2.new(0, 2, 0, 1)
        }):Play()
    end)
    
    self.frame.MouseLeave:Connect(function()
        if self.disabled then return end
        
        TweenService:Create(self.hoverOverlay, ANIMATIONS.QUICK, {
            BackgroundTransparency = 1
        }):Play()
        
        TweenService:Create(self.frame, ANIMATIONS.QUICK, {
            Size = self.frame.Size - UDim2.new(0, 2, 0, 1)
        }):Play()
    end)
    
    -- Click effects
    self.frame.MouseButton1Down:Connect(function()
        if self.disabled then return end
        
        TweenService:Create(self.frame, ANIMATIONS.QUICK, {
            Size = self.frame.Size - UDim2.new(0, 4, 0, 2)
        }):Play()
        
        self:_createRipple()
    end)
    
    self.frame.MouseButton1Up:Connect(function()
        if self.disabled then return end
        
        TweenService:Create(self.frame, ANIMATIONS.BOUNCE, {
            Size = self.frame.Size + UDim2.new(0, 4, 0, 2)
        }):Play()
    end)
    
    -- Click callback
    self.frame.MouseButton1Click:Connect(function()
        if self.disabled then return end
        self.onClick()
    end)
end

-- Create ripple effect
function ButtonLib:_createRipple()
    local mouse = UserInputService:GetMouseLocation()
    local framePos = self.frame.AbsolutePosition
    local frameSize = self.frame.AbsoluteSize
    
    local relativeX = (mouse.X - framePos.X) / frameSize.X
    local relativeY = (mouse.Y - framePos.Y) / frameSize.Y
    
    local ripple = Instance.new("Frame")
    ripple.Name = "Ripple"
    ripple.Size = UDim2.new(0, 0, 0, 0)
    ripple.Position = UDim2.new(relativeX, 0, relativeY, 0)
    ripple.AnchorPoint = Vector2.new(0.5, 0.5)
    ripple.BackgroundColor3 = Color3.new(1, 1, 1)
    ripple.BackgroundTransparency = 0.8
    ripple.BorderSizePixel = 0
    ripple.Parent = self.rippleFrame
    
    local rippleCorner = Instance.new("UICorner")
    rippleCorner.CornerRadius = UDim.new(0.5, 0)
    rippleCorner.Parent = ripple
    
    -- Animate ripple
    local maxSize = math.max(frameSize.X, frameSize.Y) * 2
    
    local expandTween = TweenService:Create(ripple, ANIMATIONS.SMOOTH, {
        Size = UDim2.new(0, maxSize, 0, maxSize),
        BackgroundTransparency = 1
    })
    
    expandTween:Play()
    expandTween.Completed:Connect(function()
        ripple:Destroy()
    end)
end

-- Update button text
function ButtonLib:setText(newText)
    self.text = newText
    self.label.Text = newText
end

-- Update button variant
function ButtonLib:setVariant(newVariant)
    if not VARIANTS[newVariant] then return end
    
    self.variant = newVariant
    local variantConfig = VARIANTS[newVariant]
    
    TweenService:Create(self.frame, ANIMATIONS.SMOOTH, {
        BackgroundColor3 = variantConfig.bg
    }):Play()
    
    TweenService:Create(self.label, ANIMATIONS.SMOOTH, {
        TextColor3 = variantConfig.text
    }):Play()
end

-- Enable/disable button
function ButtonLib:setDisabled(disabled)
    self.disabled = disabled
    
    local transparency = disabled and 0.5 or 0
    
    TweenService:Create(self.frame, ANIMATIONS.SMOOTH, {
        BackgroundTransparency = transparency
    }):Play()
    
    TweenService:Create(self.label, ANIMATIONS.SMOOTH, {
        TextTransparency = transparency
    }):Play()
end

-- Destroy button
function ButtonLib:destroy()
    if self.frame then
        self.frame:Destroy()
    end
end

-- Set button position
function ButtonLib:setPosition(position)
    self.frame.Position = position
end

-- Set button size
function ButtonLib:setSize(size)
    self.frame.Size = size
end

-- Utility function to create multiple buttons easily
function ButtonLib.createGroup(configs, parent)
    local buttons = {}
    
    for i, config in ipairs(configs) do
        config = config or {}
        config.parent = parent
        
        if not config.position then
            config.position = UDim2.new(0, 10, 0, 10 + (i - 1) * 60)
        end
        
        table.insert(buttons, ButtonLib.new(config))
    end
    
    return buttons
end

return ButtonLib
