-- QuantumUI Library v1.0 - 2025 Futuristic Theme
-- Created with holographic effects, neon accents, and glassmorphism design

local QuantumUI = {}
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

-- Color scheme for 2025 theme
local Colors = {
    Primary = Color3.fromRGB(0, 255, 200),      -- Cyan
    Secondary = Color3.fromRGB(255, 0, 150),     -- Hot Pink
    Accent = Color3.fromRGB(150, 0, 255),        -- Purple
    Background = Color3.fromRGB(10, 10, 20),     -- Dark Blue
    Glass = Color3.fromRGB(255, 255, 255),       -- White for glass effect
    Text = Color3.fromRGB(255, 255, 255),        -- White
    Success = Color3.fromRGB(0, 255, 100),       -- Green
    Warning = Color3.fromRGB(255, 200, 0),       -- Yellow
    Error = Color3.fromRGB(255, 50, 50)          -- Red
}

-- Utility functions
local function createGlow(parent, color, size)
    local glow = Instance.new("ImageLabel")
    glow.Name = "Glow"
    glow.Parent = parent
    glow.BackgroundTransparency = 1
    glow.Size = UDim2.new(1, size, 1, size)
    glow.Position = UDim2.new(0, -size/2, 0, -size/2)
    glow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
    glow.ImageColor3 = color
    glow.ImageTransparency = 0.3
    glow.ZIndex = parent.ZIndex - 1
    return glow
end

local function createHolographicEffect(frame)
    local hologram = Instance.new("Frame")
    hologram.Name = "HologramEffect"
    hologram.Parent = frame
    hologram.Size = UDim2.new(1, 0, 1, 0)
    hologram.Position = UDim2.new(0, 0, 0, 0)
    hologram.BackgroundTransparency = 0.9
    hologram.BackgroundColor3 = Colors.Primary
    hologram.BorderSizePixel = 0
    hologram.ZIndex = frame.ZIndex + 1
    
    local gradient = Instance.new("UIGradient")
    gradient.Parent = hologram
    gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 255, 255)),
        ColorSequenceKeypoint.new(0.5, Colors.Primary),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 255))
    }
    gradient.Rotation = 45
    
    -- Animate the holographic effect
    local tween = TweenService:Create(gradient, TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1), {
        Rotation = gradient.Rotation + 360
    })
    tween:Play()
    
    return hologram
end

local function addGlassmorphism(frame)
    frame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    frame.BackgroundTransparency = 0.9
    
    local blur = Instance.new("Frame")
    blur.Name = "BlurEffect"
    blur.Parent = frame
    blur.Size = UDim2.new(1, 0, 1, 0)
    blur.Position = UDim2.new(0, 0, 0, 0)
    blur.BackgroundColor3 = Colors.Glass
    blur.BackgroundTransparency = 0.95
    blur.BorderSizePixel = 0
    blur.ZIndex = frame.ZIndex - 1
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = frame
    
    local corner2 = Instance.new("UICorner")
    corner2.CornerRadius = UDim.new(0, 12)
    corner2.Parent = blur
    
    local stroke = Instance.new("UIStroke")
    stroke.Parent = frame
    stroke.Color = Colors.Primary
    stroke.Thickness = 1
    stroke.Transparency = 0.5
    
    return blur
end

-- Main UI creation function
function QuantumUI:CreateWindow(config)
    config = config or {}
    local windowTitle = config.Title or "QuantumUI Window"
    local windowSize = config.Size or UDim2.new(0, 500, 0, 400)
    
    -- Create main ScreenGui
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "QuantumUI_" .. tick()
    screenGui.Parent = PlayerGui
    screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    screenGui.ResetOnSpawn = false
    
    -- Main window frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "MainWindow"
    mainFrame.Parent = screenGui
    mainFrame.Size = windowSize
    mainFrame.Position = UDim2.new(0.5, -windowSize.X.Offset/2, 0.5, -windowSize.Y.Offset/2)
    mainFrame.BackgroundColor3 = Colors.Background
    mainFrame.BorderSizePixel = 0
    mainFrame.ZIndex = 10
    
    addGlassmorphism(mainFrame)
    createGlow(mainFrame, Colors.Primary, 20)
    createHolographicEffect(mainFrame)
    
    -- Title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Parent = mainFrame
    titleBar.Size = UDim2.new(1, 0, 0, 40)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.BackgroundColor3 = Colors.Primary
    titleBar.BackgroundTransparency = 0.2
    titleBar.BorderSizePixel = 0
    titleBar.ZIndex = mainFrame.ZIndex + 1
    
    local titleCorner = Instance.new("UICorner")
    titleCorner.CornerRadius = UDim.new(0, 12)
    titleCorner.Parent = titleBar
    
    local titleLabel = Instance.new("TextLabel")
    titleLabel.Name = "Title"
    titleLabel.Parent = titleBar
    titleLabel.Size = UDim2.new(1, -100, 1, 0)
    titleLabel.Position = UDim2.new(0, 10, 0, 0)
    titleLabel.BackgroundTransparency = 1
    titleLabel.Text = windowTitle
    titleLabel.TextColor3 = Colors.Text
    titleLabel.TextScaled = true
    titleLabel.Font = Enum.Font.GothamBold
    titleLabel.ZIndex = titleBar.ZIndex + 1
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Parent = titleBar
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -35, 0, 5)
    closeButton.BackgroundColor3 = Colors.Error
    closeButton.Text = "âœ•"
    closeButton.TextColor3 = Colors.Text
    closeButton.TextScaled = true
    closeButton.Font = Enum.Font.GothamBold
    closeButton.BorderSizePixel = 0
    closeButton.ZIndex = titleBar.ZIndex + 1
    
    local closeCorner = Instance.new("UICorner")
    closeCorner.CornerRadius = UDim.new(0, 8)
    closeCorner.Parent = closeButton
    
    closeButton.MouseButton1Click:Connect(function()
        screenGui:Destroy()
    end)
    
    -- Content frame
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "Content"
    contentFrame.Parent = mainFrame
    contentFrame.Size = UDim2.new(1, -20, 1, -60)
    contentFrame.Position = UDim2.new(0, 10, 0, 50)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 8
    contentFrame.ScrollBarImageColor3 = Colors.Primary
    contentFrame.CanvasSize = UDim2.new(0, 0, 0, 0)
    contentFrame.ZIndex = mainFrame.ZIndex + 1
    
    local contentLayout = Instance.new("UIListLayout")
    contentLayout.Parent = contentFrame
    contentLayout.SortOrder = Enum.SortOrder.LayoutOrder
    contentLayout.Padding = UDim.new(0, 10)
    
    -- Make window draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Window object
    local window = {
        ScreenGui = screenGui,
        MainFrame = mainFrame,
        ContentFrame = contentFrame,
        ContentLayout = contentLayout
    }
    
    -- Add button function
    function window:AddButton(config)
        config = config or {}
        local buttonText = config.Text or "Button"
        local buttonCallback = config.Callback or function() end
        
        local button = Instance.new("TextButton")
        button.Name = "Button_" .. buttonText
        button.Parent = self.ContentFrame
        button.Size = UDim2.new(1, -20, 0, 40)
        button.BackgroundColor3 = Colors.Primary
        button.BackgroundTransparency = 0.3
        button.Text = buttonText
        button.TextColor3 = Colors.Text
        button.TextScaled = true
        button.Font = Enum.Font.Gotham
        button.BorderSizePixel = 0
        button.ZIndex = self.ContentFrame.ZIndex + 1
        
        local buttonCorner = Instance.new("UICorner")
        buttonCorner.CornerRadius = UDim.new(0, 8)
        buttonCorner.Parent = button
        
        local buttonStroke = Instance.new("UIStroke")
        buttonStroke.Parent = button
        buttonStroke.Color = Colors.Primary
        buttonStroke.Thickness = 2
        buttonStroke.Transparency = 0.5
        
        -- Button animations
        button.MouseEnter:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 0.1}):Play()
            TweenService:Create(buttonStroke, TweenInfo.new(0.2), {Transparency = 0}):Play()
        end)
        
        button.MouseLeave:Connect(function()
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 0.3}):Play()
            TweenService:Create(buttonStroke, TweenInfo.new(0.2), {Transparency = 0.5}):Play()
        end)
        
        button.MouseButton1Click:Connect(function()
            -- Click animation
            TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(0.98, -20, 0, 38)}):Play()
            wait(0.1)
            TweenService:Create(button, TweenInfo.new(0.1), {Size = UDim2.new(1, -20, 0, 40)}):Play()
            buttonCallback()
        end)
        
        self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, self.ContentLayout.AbsoluteContentSize.Y)
        return button
    end
    
    -- Add toggle function
    function window:AddToggle(config)
        config = config or {}
        local toggleText = config.Text or "Toggle"
        local toggleDefault = config.Default or false
        local toggleCallback = config.Callback or function() end
        
        local toggleFrame = Instance.new("Frame")
        toggleFrame.Name = "Toggle_" .. toggleText
        toggleFrame.Parent = self.ContentFrame
        toggleFrame.Size = UDim2.new(1, -20, 0, 40)
        toggleFrame.BackgroundTransparency = 1
        toggleFrame.ZIndex = self.ContentFrame.ZIndex + 1
        
        local toggleLabel = Instance.new("TextLabel")
        toggleLabel.Parent = toggleFrame
        toggleLabel.Size = UDim2.new(1, -60, 1, 0)
        toggleLabel.Position = UDim2.new(0, 0, 0, 0)
        toggleLabel.BackgroundTransparency = 1
        toggleLabel.Text = toggleText
        toggleLabel.TextColor3 = Colors.Text
        toggleLabel.TextScaled = true
        toggleLabel.Font = Enum.Font.Gotham
        toggleLabel.TextXAlignment = Enum.TextXAlignment.Left
        toggleLabel.ZIndex = toggleFrame.ZIndex + 1
        
        local toggleButton = Instance.new("TextButton")
        toggleButton.Parent = toggleFrame
        toggleButton.Size = UDim2.new(0, 50, 0, 25)
        toggleButton.Position = UDim2.new(1, -50, 0.5, -12.5)
        toggleButton.BackgroundColor3 = toggleDefault and Colors.Success or Colors.Background
        toggleButton.Text = ""
        toggleButton.BorderSizePixel = 0
        toggleButton.ZIndex = toggleFrame.ZIndex + 1
        
        local toggleCorner = Instance.new("UICorner")
        toggleCorner.CornerRadius = UDim.new(0, 12.5)
        toggleCorner.Parent = toggleButton
        
        local toggleIndicator = Instance.new("Frame")
        toggleIndicator.Parent = toggleButton
        toggleIndicator.Size = UDim2.new(0, 20, 0, 20)
        toggleIndicator.Position = toggleDefault and UDim2.new(1, -22.5, 0.5, -10) or UDim2.new(0, 2.5, 0.5, -10)
        toggleIndicator.BackgroundColor3 = Colors.Text
        toggleIndicator.BorderSizePixel = 0
        toggleIndicator.ZIndex = toggleButton.ZIndex + 1
        
        local indicatorCorner = Instance.new("UICorner")
        indicatorCorner.CornerRadius = UDim.new(0, 10)
        indicatorCorner.Parent = toggleIndicator
        
        local isToggled = toggleDefault
        
        toggleButton.MouseButton1Click:Connect(function()
            isToggled = not isToggled
            
            local newColor = isToggled and Colors.Success or Colors.Background
            local newPosition = isToggled and UDim2.new(1, -22.5, 0.5, -10) or UDim2.new(0, 2.5, 0.5, -10)
            
            TweenService:Create(toggleButton, TweenInfo.new(0.2), {BackgroundColor3 = newColor}):Play()
            TweenService:Create(toggleIndicator, TweenInfo.new(0.2), {Position = newPosition}):Play()
            
            toggleCallback(isToggled)
        end)
        
        self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, self.ContentLayout.AbsoluteContentSize.Y)
        return {Frame = toggleFrame, Button = toggleButton, GetValue = function() return isToggled end}
    end
    
    -- Add slider function
    function window:AddSlider(config)
        config = config or {}
        local sliderText = config.Text or "Slider"
        local sliderMin = config.Min or 0
        local sliderMax = config.Max or 100
        local sliderDefault = config.Default or sliderMin
        local sliderCallback = config.Callback or function() end
        
        local sliderFrame = Instance.new("Frame")
        sliderFrame.Name = "Slider_" .. sliderText
        sliderFrame.Parent = self.ContentFrame
        sliderFrame.Size = UDim2.new(1, -20, 0, 60)
        sliderFrame.BackgroundTransparency = 1
        sliderFrame.ZIndex = self.ContentFrame.ZIndex + 1
        
        local sliderLabel = Instance.new("TextLabel")
        sliderLabel.Parent = sliderFrame
        sliderLabel.Size = UDim2.new(1, 0, 0, 20)
        sliderLabel.Position = UDim2.new(0, 0, 0, 0)
        sliderLabel.BackgroundTransparency = 1
        sliderLabel.Text = sliderText .. ": " .. sliderDefault
        sliderLabel.TextColor3 = Colors.Text
        sliderLabel.TextScaled = true
        sliderLabel.Font = Enum.Font.Gotham
        sliderLabel.TextXAlignment = Enum.TextXAlignment.Left
        sliderLabel.ZIndex = sliderFrame.ZIndex + 1
        
        local sliderBackground = Instance.new("Frame")
        sliderBackground.Parent = sliderFrame
        sliderBackground.Size = UDim2.new(1, 0, 0, 8)
        sliderBackground.Position = UDim2.new(0, 0, 0, 30)
        sliderBackground.BackgroundColor3 = Colors.Background
        sliderBackground.BorderSizePixel = 0
        sliderBackground.ZIndex = sliderFrame.ZIndex + 1
        
        local sliderBgCorner = Instance.new("UICorner")
        sliderBgCorner.CornerRadius = UDim.new(0, 4)
        sliderBgCorner.Parent = sliderBackground
        
        local sliderFill = Instance.new("Frame")
        sliderFill.Parent = sliderBackground
        sliderFill.Size = UDim2.new((sliderDefault - sliderMin) / (sliderMax - sliderMin), 0, 1, 0)
        sliderFill.Position = UDim2.new(0, 0, 0, 0)
        sliderFill.BackgroundColor3 = Colors.Primary
        sliderFill.BorderSizePixel = 0
        sliderFill.ZIndex = sliderBackground.ZIndex + 1
        
        local sliderFillCorner = Instance.new("UICorner")
        sliderFillCorner.CornerRadius = UDim.new(0, 4)
        sliderFillCorner.Parent = sliderFill
        
        local sliderKnob = Instance.new("Frame")
        sliderKnob.Parent = sliderFrame
        sliderKnob.Size = UDim2.new(0, 16, 0, 16)
        sliderKnob.Position = UDim2.new((sliderDefault - sliderMin) / (sliderMax - sliderMin), -8, 0, 26)
        sliderKnob.BackgroundColor3 = Colors.Primary
        sliderKnob.BorderSizePixel = 0
        sliderKnob.ZIndex = sliderFrame.ZIndex + 2
        
        local sliderKnobCorner = Instance.new("UICorner")
        sliderKnobCorner.CornerRadius = UDim.new(0, 8)
        sliderKnobCorner.Parent = sliderKnob
        
        local currentValue = sliderDefault
        local dragging = false
        
        sliderKnob.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                local mouseX = input.Position.X
                local frameX = sliderBackground.AbsolutePosition.X
                local frameWidth = sliderBackground.AbsoluteSize.X
                
                local percentage = math.clamp((mouseX - frameX) / frameWidth, 0, 1)
                currentValue = math.floor(sliderMin + (sliderMax - sliderMin) * percentage)
                
                sliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                sliderKnob.Position = UDim2.new(percentage, -8, 0, 26)
                sliderLabel.Text = sliderText .. ": " .. currentValue
                
                sliderCallback(currentValue)
            end
        end)
        
        UserInputService.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
            end
        end)
        
        self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, self.ContentLayout.AbsoluteContentSize.Y)
        return {Frame = sliderFrame, GetValue = function() return currentValue end}
    end
    
    -- Add textbox function
    function window:AddTextbox(config)
        config = config or {}
        local textboxText = config.Text or "Textbox"
        local textboxPlaceholder = config.Placeholder or "Enter text..."
        local textboxCallback = config.Callback or function() end
        
        local textboxFrame = Instance.new("Frame")
        textboxFrame.Name = "Textbox_" .. textboxText
        textboxFrame.Parent = self.ContentFrame
        textboxFrame.Size = UDim2.new(1, -20, 0, 60)
        textboxFrame.BackgroundTransparency = 1
        textboxFrame.ZIndex = self.ContentFrame.ZIndex + 1
        
        local textboxLabel = Instance.new("TextLabel")
        textboxLabel.Parent = textboxFrame
        textboxLabel.Size = UDim2.new(1, 0, 0, 20)
        textboxLabel.Position = UDim2.new(0, 0, 0, 0)
        textboxLabel.BackgroundTransparency = 1
        textboxLabel.Text = textboxText
        textboxLabel.TextColor3 = Colors.Text
        textboxLabel.TextScaled = true
        textboxLabel.Font = Enum.Font.Gotham
        textboxLabel.TextXAlignment = Enum.TextXAlignment.Left
        textboxLabel.ZIndex = textboxFrame.ZIndex + 1
        
        local textbox = Instance.new("TextBox")
        textbox.Parent = textboxFrame
        textbox.Size = UDim2.new(1, 0, 0, 30)
        textbox.Position = UDim2.new(0, 0, 0, 25)
        textbox.BackgroundColor3 = Colors.Background
        textbox.BackgroundTransparency = 0.3
        textbox.Text = ""
        textbox.PlaceholderText = textboxPlaceholder
        textbox.TextColor3 = Colors.Text
        textbox.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
        textbox.TextScaled = true
        textbox.Font = Enum.Font.Gotham
        textbox.BorderSizePixel = 0
        textbox.ZIndex = textboxFrame.ZIndex + 1
        
        local textboxCorner = Instance.new("UICorner")
        textboxCorner.CornerRadius = UDim.new(0, 8)
        textboxCorner.Parent = textbox
        
        local textboxStroke = Instance.new("UIStroke")
        textboxStroke.Parent = textbox
        textboxStroke.Color = Colors.Primary
        textboxStroke.Thickness = 1
        textboxStroke.Transparency = 0.7
        
        textbox.Focused:Connect(function()
            TweenService:Create(textboxStroke, TweenInfo.new(0.2), {Transparency = 0}):Play()
        end)
        
        textbox.FocusLost:Connect(function()
            TweenService:Create(textboxStroke, TweenInfo.new(0.2), {Transparency = 0.7}):Play()
            textboxCallback(textbox.Text)
        end)
        
        self.ContentFrame.CanvasSize = UDim2.new(0, 0, 0, self.ContentLayout.AbsoluteContentSize.Y)
        return {Frame = textboxFrame, Textbox = textbox, GetValue = function() return textbox.Text end}
    end
    
    return window
end

-- Notification system
function QuantumUI:CreateNotification(config)
    config = config or {}
    local notifText = config.Text or "Notification"
    local notifDuration = config.Duration or 3
    local notifType = config.Type or "Info" -- Info, Success, Warning, Error
    
    local notifColor = Colors.Primary
    if notifType == "Success" then notifColor = Colors.Success
    elseif notifType == "Warning" then notifColor = Colors.Warning
    elseif notifType == "Error" then notifColor = Colors.Error end
    
    local notifGui = Instance.new("ScreenGui")
    notifGui.Name = "QuantumNotification"
    notifGui.Parent = PlayerGui
    
    local notifFrame = Instance.new("Frame")
    notifFrame.Parent = notifGui
    notifFrame.Size = UDim2.new(0, 300, 0, 60)
    notifFrame.Position = UDim2.new(1, 0, 0, 50)
    notifFrame.BackgroundColor3 = Colors.Background
    notifFrame.BorderSizePixel = 0
    notifFrame.ZIndex = 100
    
    addGlassmorphism(notifFrame)
    createGlow(notifFrame, notifColor, 10)
    
    local notifLabel = Instance.new("TextLabel")
    notifLabel.Parent = notifFrame
    notifLabel.Size = UDim2.new(1, -20, 1, 0)
    notifLabel.Position = UDim2.new(0, 10, 0, 0)
    notifLabel.BackgroundTransparency = 1
    notifLabel.Text = notifText
    notifLabel.TextColor3 = Colors.Text
    notifLabel.TextScaled = true
    notifLabel.Font = Enum.Font.Gotham
    notifLabel.ZIndex = notifFrame.ZIndex + 1
    
    -- Slide in animation
    TweenService:Create(notifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
        Position = UDim2.new(1, -320, 0, 50)
    }):Play()
    
    -- Auto-remove after duration
    wait(notifDuration)
    TweenService:Create(notifFrame, TweenInfo.new(0.5, Enum.EasingStyle.Back), {
        Position = UDim2.new(1, 0, 0, 50)
    }):Play()
    
    wait(0.5)
    notifGui:Destroy()
end

return QuantumUI
