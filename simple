--[[
    NeonUI - Modern Roblox UI Library 2025
    
    Features:
    - Glassmorphism design
    - Smooth animations and transitions
    - Modern color schemes
    - Responsive components
    - Easy-to-use API
    
    Usage:
    local NeonUI = require(script.NeonUI)
    local ui = NeonUI.new()
]]

local NeonUI = {}
NeonUI.__index = NeonUI

-- Services
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")

-- Constants
local ANIMATION_SPEED = 0.3
local COLORS = {
    primary = Color3.fromRGB(147, 51, 234),      -- Purple
    secondary = Color3.fromRGB(59, 130, 246),    -- Blue
    success = Color3.fromRGB(34, 197, 94),       -- Green
    warning = Color3.fromRGB(245, 158, 11),      -- Yellow
    danger = Color3.fromRGB(239, 68, 68),        -- Red
    dark = Color3.fromRGB(17, 24, 39),           -- Dark gray
    light = Color3.fromRGB(249, 250, 251),       -- Light gray
    glass = Color3.fromRGB(255, 255, 255)        -- White for glass effect
}

-- Utility Functions
local function createCorner(radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 12)
    return corner
end

local function createGradient(transparency1, transparency2)
    local gradient = Instance.new("UIGradient")
    gradient.Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, transparency1 or 0.3),
        NumberSequenceKeypoint.new(1, transparency2 or 0.6)
    }
    return gradient
end

local function createStroke(color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Color3.fromRGB(255, 255, 255)
    stroke.Thickness = thickness or 1
    stroke.Transparency = 0.8
    return stroke
end

local function animateProperty(object, properties, duration, easingStyle, easingDirection)
    local tweenInfo = TweenInfo.new(
        duration or ANIMATION_SPEED,
        easingStyle or Enum.EasingStyle.Quart,
        easingDirection or Enum.EasingDirection.Out
    )
    local tween = TweenService:Create(object, tweenInfo, properties)
    tween:Play()
    return tween
end

-- Main Constructor
function NeonUI.new()
    local self = setmetatable({}, NeonUI)
    
    -- Create main ScreenGui
    self.screenGui = Instance.new("ScreenGui")
    self.screenGui.Name = "NeonUI"
    self.screenGui.ResetOnSpawn = false
    self.screenGui.Parent = Players.LocalPlayer:WaitForChild("PlayerGui")
    
    return self
end

-- Window Component
function NeonUI:CreateWindow(config)
    config = config or {}
    
    local window = {}
    
    -- Main frame
    local mainFrame = Instance.new("Frame")
    mainFrame.Name = "NeonWindow"
    mainFrame.Size = config.size or UDim2.new(0, 600, 0, 400)
    mainFrame.Position = config.position or UDim2.new(0.5, -300, 0.5, -200)
    mainFrame.BackgroundColor3 = COLORS.dark
    mainFrame.BackgroundTransparency = 0.1
    mainFrame.BorderSizePixel = 0
    mainFrame.Parent = self.screenGui
    
    -- Glass effect
    local glassEffect = createGradient(0.3, 0.6)
    glassEffect.Parent = mainFrame
    
    local corner = createCorner(16)
    corner.Parent = mainFrame
    
    local stroke = createStroke(COLORS.glass, 1)
    stroke.Parent = mainFrame
    
    -- Shadow effect
    local shadow = Instance.new("ImageLabel")
    shadow.Name = "Shadow"
    shadow.Size = UDim2.new(1, 30, 1, 30)
    shadow.Position = UDim2.new(0, -15, 0, -15)
    shadow.BackgroundTransparency = 1
    shadow.Image = "rbxasset://textures/ui/GuiImagePlaceholder.png"
    shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
    shadow.ImageTransparency = 0.8
    shadow.ZIndex = -1
    shadow.Parent = mainFrame
    
    -- Title bar
    local titleBar = Instance.new("Frame")
    titleBar.Name = "TitleBar"
    titleBar.Size = UDim2.new(1, 0, 0, 50)
    titleBar.Position = UDim2.new(0, 0, 0, 0)
    titleBar.BackgroundColor3 = COLORS.primary
    titleBar.BackgroundTransparency = 0.2
    titleBar.BorderSizePixel = 0
    titleBar.Parent = mainFrame
    
    local titleCorner = createCorner(16)
    titleCorner.Parent = titleBar
    
    -- Title text
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Size = UDim2.new(1, -20, 1, 0)
    titleText.Position = UDim2.new(0, 20, 0, 0)
    titleText.BackgroundTransparency = 1
    titleText.Text = config.title or "NeonUI Window"
    titleText.TextColor3 = COLORS.light
    titleText.TextSize = 18
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Font = Enum.Font.GothamBold
    titleText.Parent = titleBar
    
    -- Close button
    local closeButton = Instance.new("TextButton")
    closeButton.Name = "CloseButton"
    closeButton.Size = UDim2.new(0, 30, 0, 30)
    closeButton.Position = UDim2.new(1, -40, 0, 10)
    closeButton.BackgroundColor3 = COLORS.danger
    closeButton.BackgroundTransparency = 0.3
    closeButton.BorderSizePixel = 0
    closeButton.Text = "Ã—"
    closeButton.TextColor3 = COLORS.light
    closeButton.TextSize = 20
    closeButton.Font = Enum.Font.GothamBold
    closeButton.Parent = titleBar
    
    local closeCorner = createCorner(8)
    closeCorner.Parent = closeButton
    
    -- Content area
    local contentFrame = Instance.new("ScrollingFrame")
    contentFrame.Name = "Content"
    contentFrame.Size = UDim2.new(1, -20, 1, -70)
    contentFrame.Position = UDim2.new(0, 10, 0, 60)
    contentFrame.BackgroundTransparency = 1
    contentFrame.BorderSizePixel = 0
    contentFrame.ScrollBarThickness = 6
    contentFrame.ScrollBarImageColor3 = COLORS.primary
    contentFrame.Parent = mainFrame
    
    -- Layout
    local layout = Instance.new("UIListLayout")
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Padding = UDim.new(0, 10)
    layout.Parent = contentFrame
    
    -- Window animations
    mainFrame.Size = UDim2.new(0, 0, 0, 0)
    mainFrame.BackgroundTransparency = 1
    
    -- Entrance animation
    local entranceTween = animateProperty(mainFrame, {
        Size = config.size or UDim2.new(0, 600, 0, 400),
        BackgroundTransparency = 0.1
    }, 0.5, Enum.EasingStyle.Back)
    
    -- Make draggable
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    titleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = mainFrame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Close functionality
    closeButton.MouseButton1Click:Connect(function()
        animateProperty(mainFrame, {
            Size = UDim2.new(0, 0, 0, 0),
            BackgroundTransparency = 1
        }, 0.3, Enum.EasingStyle.Back):andThen(function()
            mainFrame:Destroy()
        end)
    end)
    
    -- Hover effects
    closeButton.MouseEnter:Connect(function()
        animateProperty(closeButton, {BackgroundTransparency = 0.1}, 0.2)
    end)
    
    closeButton.MouseLeave:Connect(function()
        animateProperty(closeButton, {BackgroundTransparency = 0.3}, 0.2)
    end)
    
    window.frame = mainFrame
    window.content = contentFrame
    return window
end

-- Button Component
function NeonUI:CreateButton(parent, config)
    config = config or {}
    
    local button = Instance.new("TextButton")
    button.Name = config.name or "NeonButton"
    button.Size = config.size or UDim2.new(0, 200, 0, 45)
    button.Position = config.position or UDim2.new(0, 0, 0, 0)
    button.BackgroundColor3 = config.color or COLORS.primary
    button.BackgroundTransparency = 0.2
    button.BorderSizePixel = 0
    button.Text = config.text or "Button"
    button.TextColor3 = COLORS.light
    button.TextSize = config.textSize or 16
    button.Font = Enum.Font.GothamSemibold
    button.Parent = parent
    
    local corner = createCorner(12)
    corner.Parent = button
    
    local gradient = createGradient(0.2, 0.4)
    gradient.Parent = button
    
    local stroke = createStroke(COLORS.light, 1)
    stroke.Parent = button
    
    -- Hover animations
    button.MouseEnter:Connect(function()
        animateProperty(button, {
            BackgroundTransparency = 0.1,
            Size = UDim2.new(button.Size.X.Scale, button.Size.X.Offset + 5, button.Size.Y.Scale, button.Size.Y.Offset + 2)
        }, 0.2)
    end)
    
    button.MouseLeave:Connect(function()
        animateProperty(button, {
            BackgroundTransparency = 0.2,
            Size = config.size or UDim2.new(0, 200, 0, 45)
        }, 0.2)
    end)
    
    -- Click animation
    button.MouseButton1Click:Connect(function()
        animateProperty(button, {Size = UDim2.new(button.Size.X.Scale, button.Size.X.Offset - 3, button.Size.Y.Scale, button.Size.Y.Offset - 1)}, 0.1):andThen(function()
            animateProperty(button, {Size = config.size or UDim2.new(0, 200, 0, 45)}, 0.1)
        end)
        
        if config.callback then
            config.callback()
        end
    end)
    
    return button
end

-- Toggle Component
function NeonUI:CreateToggle(parent, config)
    config = config or {}
    
    local toggleFrame = Instance.new("Frame")
    toggleFrame.Name = config.name or "NeonToggle"
    toggleFrame.Size = config.size or UDim2.new(0, 250, 0, 50)
    toggleFrame.Position = config.position or UDim2.new(0, 0, 0, 0)
    toggleFrame.BackgroundTransparency = 1
    toggleFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, -70, 1, 0)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = config.text or "Toggle"
    label.TextColor3 = COLORS.light
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = toggleFrame
    
    local toggleButton = Instance.new("TextButton")
    toggleButton.Name = "ToggleButton"
    toggleButton.Size = UDim2.new(0, 60, 0, 30)
    toggleButton.Position = UDim2.new(1, -60, 0.5, -15)
    toggleButton.BackgroundColor3 = COLORS.dark
    toggleButton.BackgroundTransparency = 0.3
    toggleButton.BorderSizePixel = 0
    toggleButton.Text = ""
    toggleButton.Parent = toggleFrame
    
    local toggleCorner = createCorner(15)
    toggleCorner.Parent = toggleButton
    
    local toggleStroke = createStroke(COLORS.light, 1)
    toggleStroke.Parent = toggleButton
    
    local indicator = Instance.new("Frame")
    indicator.Name = "Indicator"
    indicator.Size = UDim2.new(0, 24, 0, 24)
    indicator.Position = UDim2.new(0, 3, 0.5, -12)
    indicator.BackgroundColor3 = COLORS.light
    indicator.BorderSizePixel = 0
    indicator.Parent = toggleButton
    
    local indicatorCorner = createCorner(12)
    indicatorCorner.Parent = indicator
    
    local isToggled = config.default or false
    
    local function updateToggle()
        if isToggled then
            animateProperty(indicator, {Position = UDim2.new(1, -27, 0.5, -12)}, 0.2)
            animateProperty(toggleButton, {BackgroundColor3 = COLORS.primary}, 0.2)
        else
            animateProperty(indicator, {Position = UDim2.new(0, 3, 0.5, -12)}, 0.2)
            animateProperty(toggleButton, {BackgroundColor3 = COLORS.dark}, 0.2)
        end
    end
    
    updateToggle()
    
    toggleButton.MouseButton1Click:Connect(function()
        isToggled = not isToggled
        updateToggle()
        
        if config.callback then
            config.callback(isToggled)
        end
    end)
    
    return {frame = toggleFrame, getValue = function() return isToggled end}
end

-- Slider Component
function NeonUI:CreateSlider(parent, config)
    config = config or {}
    
    local sliderFrame = Instance.new("Frame")
    sliderFrame.Name = config.name or "NeonSlider"
    sliderFrame.Size = config.size or UDim2.new(0, 300, 0, 60)
    sliderFrame.Position = config.position or UDim2.new(0, 0, 0, 0)
    sliderFrame.BackgroundTransparency = 1
    sliderFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = config.text or "Slider"
    label.TextColor3 = COLORS.light
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = sliderFrame
    
    local valueLabel = Instance.new("TextLabel")
    valueLabel.Name = "ValueLabel"
    valueLabel.Size = UDim2.new(0, 50, 0, 20)
    valueLabel.Position = UDim2.new(1, -50, 0, 0)
    valueLabel.BackgroundTransparency = 1
    valueLabel.Text = tostring(config.default or 0)
    valueLabel.TextColor3 = COLORS.primary
    valueLabel.TextSize = 16
    valueLabel.TextXAlignment = Enum.TextXAlignment.Right
    valueLabel.Font = Enum.Font.GothamBold
    valueLabel.Parent = sliderFrame
    
    local sliderTrack = Instance.new("Frame")
    sliderTrack.Name = "Track"
    sliderTrack.Size = UDim2.new(1, 0, 0, 6)
    sliderTrack.Position = UDim2.new(0, 0, 1, -20)
    sliderTrack.BackgroundColor3 = COLORS.dark
    sliderTrack.BackgroundTransparency = 0.3
    sliderTrack.BorderSizePixel = 0
    sliderTrack.Parent = sliderFrame
    
    local trackCorner = createCorner(3)
    trackCorner.Parent = sliderTrack
    
    local sliderFill = Instance.new("Frame")
    sliderFill.Name = "Fill"
    sliderFill.Size = UDim2.new(0, 0, 1, 0)
    sliderFill.Position = UDim2.new(0, 0, 0, 0)
    sliderFill.BackgroundColor3 = COLORS.primary
    sliderFill.BorderSizePixel = 0
    sliderFill.Parent = sliderTrack
    
    local fillCorner = createCorner(3)
    fillCorner.Parent = sliderFill
    
    local sliderHandle = Instance.new("TextButton")
    sliderHandle.Name = "Handle"
    sliderHandle.Size = UDim2.new(0, 20, 0, 20)
    sliderHandle.Position = UDim2.new(0, -10, 0.5, -10)
    sliderHandle.BackgroundColor3 = COLORS.light
    sliderHandle.BorderSizePixel = 0
    sliderHandle.Text = ""
    sliderHandle.Parent = sliderTrack
    
    local handleCorner = createCorner(10)
    handleCorner.Parent = sliderHandle
    
    local min = config.min or 0
    local max = config.max or 100
    local value = config.default or min
    local dragging = false
    
    local function updateSlider()
        local percentage = (value - min) / (max - min)
        animateProperty(sliderFill, {Size = UDim2.new(percentage, 0, 1, 0)}, 0.1)
        animateProperty(sliderHandle, {Position = UDim2.new(percentage, -10, 0.5, -10)}, 0.1)
        valueLabel.Text = tostring(math.floor(value))
    end
    
    updateSlider()
    
    sliderHandle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            animateProperty(sliderHandle, {Size = UDim2.new(0, 24, 0, 24)}, 0.1)
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position.X
            local trackPos = sliderTrack.AbsolutePosition.X
            local trackSize = sliderTrack.AbsoluteSize.X
            local percentage = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
            value = min + (max - min) * percentage
            updateSlider()
            
            if config.callback then
                config.callback(value)
            end
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
            animateProperty(sliderHandle, {Size = UDim2.new(0, 20, 0, 20)}, 0.1)
        end
    end)
    
    return {frame = sliderFrame, getValue = function() return value end}
end

-- Input Component
function NeonUI:CreateInput(parent, config)
    config = config or {}
    
    local inputFrame = Instance.new("Frame")
    inputFrame.Name = config.name or "NeonInput"
    inputFrame.Size = config.size or UDim2.new(0, 300, 0, 70)
    inputFrame.Position = config.position or UDim2.new(0, 0, 0, 0)
    inputFrame.BackgroundTransparency = 1
    inputFrame.Parent = parent
    
    local label = Instance.new("TextLabel")
    label.Name = "Label"
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.BackgroundTransparency = 1
    label.Text = config.text or "Input"
    label.TextColor3 = COLORS.light
    label.TextSize = 16
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Font = Enum.Font.Gotham
    label.Parent = inputFrame
    
    local textBox = Instance.new("TextBox")
    textBox.Name = "TextBox"
    textBox.Size = UDim2.new(1, 0, 0, 40)
    textBox.Position = UDim2.new(0, 0, 1, -40)
    textBox.BackgroundColor3 = COLORS.dark
    textBox.BackgroundTransparency = 0.3
    textBox.BorderSizePixel = 0
    textBox.Text = config.placeholder or ""
    textBox.PlaceholderText = config.placeholder or "Enter text..."
    textBox.TextColor3 = COLORS.light
    textBox.PlaceholderColor3 = Color3.fromRGB(156, 163, 175)
    textBox.TextSize = 16
    textBox.Font = Enum.Font.Gotham
    textBox.TextXAlignment = Enum.TextXAlignment.Left
    textBox.Parent = inputFrame
    
    local corner = createCorner(8)
    corner.Parent = textBox
    
    local stroke = createStroke(COLORS.light, 1)
    stroke.Parent = textBox
    
    -- Focus animations
    textBox.Focused:Connect(function()
        animateProperty(stroke, {Color = COLORS.primary, Thickness = 2}, 0.2)
    end)
    
    textBox.FocusLost:Connect(function()
        animateProperty(stroke, {Color = COLORS.light, Thickness = 1}, 0.2)
        
        if config.callback then
            config.callback(textBox.Text)
        end
    end)
    
    return {frame = inputFrame, getValue = function() return textBox.Text end}
end

-- Notification System
function NeonUI:CreateNotification(config)
    config = config or {}
    
    local notification = Instance.new("Frame")
    notification.Name = "NeonNotification"
    notification.Size = UDim2.new(0, 350, 0, 80)
    notification.Position = UDim2.new(1, -370, 0, 20)
    notification.BackgroundColor3 = config.color or COLORS.primary
    notification.BackgroundTransparency = 0.1
    notification.BorderSizePixel = 0
    notification.Parent = self.screenGui
    
    local corner = createCorner(12)
    corner.Parent = notification
    
    local gradient = createGradient(0.1, 0.3)
    gradient.Parent = notification
    
    local stroke = createStroke(COLORS.light, 1)
    stroke.Parent = notification
    
    local title = Instance.new("TextLabel")
    title.Name = "Title"
    title.Size = UDim2.new(1, -20, 0, 25)
    title.Position = UDim2.new(0, 10, 0, 10)
    title.BackgroundTransparency = 1
    title.Text = config.title or "Notification"
    title.TextColor3 = COLORS.light
    title.TextSize = 18
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Font = Enum.Font.GothamBold
    title.Parent = notification
    
    local description = Instance.new("TextLabel")
    description.Name = "Description"
    description.Size = UDim2.new(1, -20, 0, 35)
    description.Position = UDim2.new(0, 10, 0, 35)
    description.BackgroundTransparency = 1
    description.Text = config.description or "This is a notification"
    description.TextColor3 = COLORS.light
    description.TextSize = 14
    description.TextXAlignment = Enum.TextXAlignment.Left
    description.TextWrapped = true
    description.Font = Enum.Font.Gotham
    description.Parent = notification
    
    -- Entrance animation
    notification.Position = UDim2.new(1, 50, 0, 20)
    animateProperty(notification, {Position = UDim2.new(1, -370, 0, 20)}, 0.4, Enum.EasingStyle.Back)
    
    -- Auto dismiss
    wait(config.duration or 3)
    animateProperty(notification, {
        Position = UDim2.new(1, 50, 0, 20),
        BackgroundTransparency = 1
    }, 0.3):andThen(function()
        notification:Destroy()
    end)
end

return NeonUI
